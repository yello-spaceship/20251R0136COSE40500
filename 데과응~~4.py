# -*- coding: utf-8 -*-
"""데과응~~4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1goHY8mxszKRRR9ddgRAQxqAJB6xwZAzp
"""

import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor, GradientBoostingRegressor
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import OneHotEncoder, StandardScaler

data=pd.read_csv("question1-train.csv")
data['hour'] = pd.to_datetime(data['datetime']).dt.hour
data['month']=pd.to_datetime(data['datetime']).dt.month
categorical=['season','holiday','workingday','weather','hour','month','registered','casual']
numerical=['temp','atemp','humidity','windspeed']
target='count'
data=data.drop(['datetime'],axis=1)
#data.head()
X=data[categorical+numerical]
y=data[target]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

preprocessor = ColumnTransformer(
    transformers=[
        ('cat', OneHotEncoder(), categorical),

    ])

model=RandomForestRegressor(random_state=42)
pipeline = Pipeline([
    ('preprocessor', preprocessor),
    ('model', model)
])
pipeline.fit(X_train, y_train)
y_pred = pipeline.predict(X_test)

mse=mean_squared_error(y_test,y_pred)
mse

comparison=pd.DataFrame({'y_test':y_test,'y_pred':y_pred})
comparison